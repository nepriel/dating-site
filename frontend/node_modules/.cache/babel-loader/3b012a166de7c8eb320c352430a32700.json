{"ast":null,"code":"var _slicedToArray = require(\"/home/abn/my-projects/matcha-42/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\n/* eslint no-use-before-define: 0 */\n// >>> SORTERS <<<\nvar defaultComparer = function defaultComparer(direction, a, b) {\n  if (a === b) return 0;\n  if (a < b) return -direction;\n  if (a == null) return 1;\n  if (b == null) return -1;\n  return direction;\n};\n\nvar customComparerProvider = function customComparerProvider(comparer) {\n  return function (direction, a, b) {\n    return comparer(a, b) * direction;\n  };\n};\n/**\n * stringSorter does not support nested property.\n * For nested properties or value transformation (e.g toLowerCase) we should use functionSorter\n * Based on benchmark testing using stringSorter is bit faster then using equivalent function sorter\n * @example sort(users).asc('firstName')\n */\n\n\nvar stringSorter = function stringSorter(direction, sortBy, comparer, a, b) {\n  return comparer(direction, a[sortBy], b[sortBy]);\n};\n/**\n * @example sort(users).asc(p => p.address.city)\n */\n\n\nvar functionSorter = function functionSorter(direction, sortBy, comparer, a, b) {\n  return comparer(direction, sortBy(a), sortBy(b));\n};\n/**\n * Used when we have sorting by multyple properties and when current sorter is function\n * @example sort(users).asc([p => p.address.city, p => p.firstName])\n */\n\n\nvar multiPropFunctionSorter = function multiPropFunctionSorter(sortBy, thenBy, depth, direction, comparer, a, b) {\n  return multiPropEqualityHandler(sortBy(a), sortBy(b), thenBy, depth, direction, comparer, a, b);\n};\n/**\n * Used when we have sorting by multiple properties and when current sorter is string\n * @example sort(users).asc(['firstName', 'lastName'])\n */\n\n\nvar multiPropStringSorter = function multiPropStringSorter(sortBy, thenBy, depth, direction, comparer, a, b) {\n  return multiPropEqualityHandler(a[sortBy], b[sortBy], thenBy, depth, direction, comparer, a, b);\n};\n/**\n * Used with 'by' sorter when we have sorting in multiple direction\n * @example sort(users).asc(['firstName', 'lastName'])\n */\n\n\nvar multiPropObjectSorter = function multiPropObjectSorter(sortByObj, thenBy, depth, _direction, _comparer, a, b) {\n  var sortBy = sortByObj.asc || sortByObj.desc;\n  var direction = sortByObj.asc ? 1 : -1;\n  var comparer = sortByObj.comparer ? customComparerProvider(sortByObj.comparer) : defaultComparer;\n\n  if (!sortBy) {\n    throw Error(\"sort: Invalid 'by' sorting configuration.\\n      Expecting object with 'asc' or 'desc' key\");\n  }\n\n  var multiSorter = getMultiPropertySorter(sortBy);\n  return multiSorter(sortBy, thenBy, depth, direction, comparer, a, b);\n}; // >>> HELPERS <<<\n\n/**\n * Return multiProperty sort hanrdler based on sortBy value\n */\n\n\nvar getMultiPropertySorter = function getMultiPropertySorter(sortBy) {\n  var type = typeof sortBy;\n\n  if (type === 'string') {\n    return multiPropStringSorter;\n  }\n\n  if (type === 'function') {\n    return multiPropFunctionSorter;\n  }\n\n  return multiPropObjectSorter;\n};\n\nvar multiPropEqualityHandler = function multiPropEqualityHandler(valA, valB, thenBy, depth, direction, comparer, a, b) {\n  if (valA === valB || valA == null && valB == null) {\n    if (thenBy.length > depth) {\n      var multiSorter = getMultiPropertySorter(thenBy[depth]);\n      return multiSorter(thenBy[depth], thenBy, depth + 1, direction, comparer, a, b);\n    }\n\n    return 0;\n  }\n\n  return comparer(direction, valA, valB);\n};\n/**\n * Pick sorter based on provided sortBy value\n */\n\n\nvar sort = function sort(direction, ctx, sortBy, comparer) {\n  if (!Array.isArray(ctx)) return ctx; // Unwrap sortBy if array with only 1 value\n\n  if (Array.isArray(sortBy) && sortBy.length < 2) {\n    var _sortBy = sortBy;\n\n    var _sortBy2 = _slicedToArray(_sortBy, 1);\n\n    sortBy = _sortBy2[0];\n  }\n\n  var _sorter;\n\n  if (!sortBy || sortBy === true) {\n    _sorter = comparer.bind(undefined, direction);\n  } else if (typeof sortBy === 'string') {\n    _sorter = stringSorter.bind(undefined, direction, sortBy, comparer);\n  } else if (typeof sortBy === 'function') {\n    _sorter = functionSorter.bind(undefined, direction, sortBy, comparer);\n  } else {\n    _sorter = getMultiPropertySorter(sortBy[0]).bind(undefined, sortBy.shift(), sortBy, 0, direction, comparer);\n  }\n\n  return ctx.sort(_sorter);\n}; // >>> PUBLIC <<<\n\n\nmodule.exports = function (ctx) {\n  return {\n    asc: function asc(sortBy) {\n      return sort(1, ctx, sortBy, defaultComparer);\n    },\n    desc: function desc(sortBy) {\n      return sort(-1, ctx, sortBy, defaultComparer);\n    },\n    by: function by(sortBy) {\n      if (!Array.isArray(ctx)) return ctx;\n      var sortByInSingleDirection;\n\n      if (!Array.isArray(sortBy)) {\n        sortByInSingleDirection = sortBy;\n      } else if (sortBy.length === 1) {\n        var _sortBy3 = _slicedToArray(sortBy, 1);\n\n        sortByInSingleDirection = _sortBy3[0];\n      } // Unwrap sort by to faster path for dedicated single direction sorters\n\n\n      if (sortByInSingleDirection) {\n        var direction = sortByInSingleDirection.asc ? 1 : -1;\n        var singleDirectionSortBy = sortByInSingleDirection.asc || sortByInSingleDirection.desc;\n        var comparer = sortByInSingleDirection.comparer ? customComparerProvider(sortByInSingleDirection.comparer) : defaultComparer;\n\n        if (!singleDirectionSortBy) {\n          throw Error(\"sort: Invalid 'by' sorting configuration.\\n            Expecting object with 'asc' or 'desc' key\");\n        }\n\n        return sort(direction, ctx, singleDirectionSortBy, comparer);\n      }\n\n      var _sorter = multiPropObjectSorter.bind(undefined, sortBy.shift(), sortBy, 0, undefined, undefined);\n\n      return ctx.sort(_sorter);\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}